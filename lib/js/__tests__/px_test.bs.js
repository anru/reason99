// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Pr$Reason99 = require("../src/Pr.bs.js");

describe("99 problems", (function () {
        Jest.test("p01_1", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[47], Jest.Expect[/* expect */0](Pr$Reason99.last_element_01(/* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p01_2", (function () {
                return Jest.Expect[/* toBe */2](/* None */0, Jest.Expect[/* expect */0](Pr$Reason99.last_element_01(/* [] */0)));
              }));
        Jest.test("p02_1", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* tuple */[
                              21,
                              47
                            ]], Jest.Expect[/* expect */0](Pr$Reason99.last_two_02(/* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p02_2", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* tuple */[
                              "21",
                              "47"
                            ]], Jest.Expect[/* expect */0](Pr$Reason99.last_two_02(/* :: */[
                                    "12",
                                    /* :: */[
                                      "21",
                                      /* :: */[
                                        "47",
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p02_3", (function () {
                return Jest.Expect[/* toBe */2](/* None */0, Jest.Expect[/* expect */0](Pr$Reason99.last_two_02(/* :: */[
                                    12,
                                    /* [] */0
                                  ])));
              }));
        Jest.test("p03_1", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[21], Jest.Expect[/* expect */0](Pr$Reason99.at_03(1, /* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p03_2", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[47], Jest.Expect[/* expect */0](Pr$Reason99.at_03(2, /* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p03_2", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](Pr$Reason99.at_03(6, /* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p04_1", (function () {
                return Jest.Expect[/* toEqual */12](3, Jest.Expect[/* expect */0](Pr$Reason99.length_04(/* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p04_1", (function () {
                return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Pr$Reason99.length_04(/* [] */0)));
              }));
        Jest.test("p05_1", (function () {
                return Jest.Expect[/* toEqual */12](/* :: */[
                            47,
                            /* :: */[
                              21,
                              /* :: */[
                                12,
                                /* [] */0
                              ]
                            ]
                          ], Jest.Expect[/* expect */0](Pr$Reason99.rev_05(/* :: */[
                                    12,
                                    /* :: */[
                                      21,
                                      /* :: */[
                                        47,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p05_2", (function () {
                return Jest.Expect[/* toEqual */12](/* [] */0, Jest.Expect[/* expect */0](Pr$Reason99.rev_05(/* [] */0)));
              }));
        Jest.test("p06_1", (function () {
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](Pr$Reason99.is_palindrome(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          2,
                                          /* :: */[
                                            1,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("p06_1", (function () {
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](Pr$Reason99.is_palindrome(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        2,
                                        /* :: */[
                                          1,
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ])));
              }));
        return Jest.test("p06_1", (function () {
                      return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0](Pr$Reason99.is_palindrome(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              2,
                                              /* :: */[
                                                2,
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ])));
                    }));
      }));

/*  Not a pure module */
